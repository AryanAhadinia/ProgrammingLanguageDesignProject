#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 19 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 5749 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #"; adding required dependencies"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 2 #" ("
0 0 14 3 3 #"lib"
0 0 24 3 1 #" "
0 0 19 3 9 #"\"eopl.ss\""
0 0 24 3 1 #" "
0 0 19 3 6 #"\"eopl\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 16 #"parser-tools/lex"
0 0 24 3 2 #" ("
0 0 14 3 9 #"prefix-in"
0 0 24 3 1 #" "
0 0 14 3 1 #":"
0 0 24 3 1 #" "
0 0 14 3 20 #"parser-tools/lex-sre"
0 0 24 3 2 #") "
0 0 14 3 17 #"parser-tools/yacc"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 7 #"require"
0 0 24 3 1 #" "
0 0 14 3 12 #"racket/trace"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; store-value"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 11 #"store-value"
0 0 24 3 1 #" "
0 0 14 3 12 #"store-value?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"none-val"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"numeric-val"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"bool-val"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 8 #"boolean?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"list-val"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 12 #"store-value?"
0 0 24 3 3 #")]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 12 #"function-val"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 10 #"bound-vars"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 15 3 12 #"default-vals"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-of"
0 0 24 3 1 #" "
0 0 14 3 12 #"store-value?"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"statements?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"saved-env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"store-value->string"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"store-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"store-value"
0 0 24 3 1 #" "
0 0 14 3 9 #"store-val"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"none-val"
0 0 24 3 4 #" () "
0 0 19 3 6 #"\"None\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 3 #") ("
0 0 14 3 14 #"number->string"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"True\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"False\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"list-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 4 #"strs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 1 #" "
0 0 14 3 19 #"store-value->string"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 5 #"foldl"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"v"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 14 3 1 #"s"
0 0 24 3 1 #" "
0 0 19 3 4 #"\", \""
0 0 24 3 1 #" "
0 0 14 3 1 #"v"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"strs"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"strs"
0 0 24 3 3 #")) "
0 0 19 3 3 #"\"]\""
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"function-val"
0 0 24 3 2 #" ("
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-vars"
0 0 24 3 1 #" "
0 0 15 3 12 #"default-vals"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 13 #"string-append"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"function\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"symbol->string"
0 0 24 3 1 #" "
0 0 14 3 13 #"function-name"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; unwrap"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 40 #"store-value->function-val->function-name"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"store-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"function-val"
0 0 24 3 2 #" ("
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-vars"
0 0 24 3 1 #" "
0 0 15 3 12 #"default-vals"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 24 3 2 #") "
0 0 14 3 13 #"function-name"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"store-value->bool"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"store-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-val"
0 0 24 3 2 #") "
0 0 14 3 7 #"the-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"store-value->number"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"store-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-val"
0 0 24 3 2 #") "
0 0 14 3 7 #"the-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"store-value->list"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"store-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"list-val"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-val"
0 0 24 3 2 #") "
0 0 14 3 7 #"the-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; store"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 13 #"uninitialized"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"empty-store"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"initialize-store!"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 3 #" ()"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 3 2 #" ("
0 0 14 3 11 #"empty-store"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"newref"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"next-ref"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 8 #"next-ref"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"deref"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"report-invalid-reference"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 6 #"setref"
0 0 24 3 1 #" "
0 0 19 3 34 #"\"illegal reference ~s in store ~s\""
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"setref!"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 6 #"letrec"
0 0 24 3 3 #" (["
0 0 14 3 12 #"setref-inner"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"store1"
0 0 24 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 6 #"store1"
0 0 24 3 3 #") ("
0 0 14 3 24 #"report-invalid-reference"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                         [("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 24 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"store1"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"store1"
0 0 24 3 3 #") ("
0 0 14 3 12 #"setref-inner"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"store1"
0 0 24 3 3 #") ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"ref1"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 8 #")))]))])"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 12 #"setref-inner"
0 0 24 3 1 #" "
0 0 14 3 9 #"the-store"
0 0 24 3 1 #" "
0 0 14 3 3 #"ref"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"reference?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           (("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 8 #"integer?"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #")) "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           (("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #") "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 13 #"; environment"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"empty-env"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"extend-env"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 10 #"reference?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 8 #"rest-env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 13 #"interrupt-env"
0 0 24 3 1 #" "
0 0 17 3 20 #"; for env separation"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 20 #"interrupt-with-value"
0 0 24 3 1 #" "
0 0 17 3 18 #"; for return value"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 12 #"store-value?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 18 #"interrupt-continue"
0 0 24 3 1 #" "
0 0 17 3 14 #"; for continue"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 15 #"interrupt-break"
0 0 24 3 1 #" "
0 0 17 3 11 #"; for break"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 12 #"environment?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"bounded?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 8 #"rest-env"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 8 #"bounded?"
0 0 24 3 1 #" "
0 0 14 3 8 #"rest-env"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"interrupted?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"interrupt-env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 20 #"interrupt-with-value"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"interrupt-continue"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"interrupt-break"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"interrupted-break?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"interrupt-break"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-env"
0 0 24 3 2 #") "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"remove-break-interrupt"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"interrupt-break"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-env"
0 0 24 3 2 #") "
0 0 14 3 7 #"the-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"remove-continue-interrupt"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"interrupt-continue"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-env"
0 0 24 3 2 #") "
0 0 14 3 7 #"the-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"apply-env"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 8 #"rest-env"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 8 #"rest-env"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"No binding for ~s\""
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"apply-env-ignore-interrupt"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"empty-env"
0 0 24 3 5 #" () ("
0 0 14 3 10 #"eopl:error"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 26 #"apply-env-ignore-interrupt"
0 0 24 3 1 #" "
0 0 19 3 19 #"\"No binding for ~s\""
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 8 #"rest-env"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 4 #"eqv?"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                         "
0 0 14 3 3 #"val"
0 0 24 29 1 #"\n"
0 0 24 3 42 #"                                         ("
0 0 14 3 26 #"apply-env-ignore-interrupt"
0 0 24 3 1 #" "
0 0 14 3 8 #"rest-env"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"interrupt-env"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-env"
0 0 24 3 3 #") ("
0 0 14 3 26 #"apply-env-ignore-interrupt"
0 0 24 3 1 #" "
0 0 14 3 7 #"the-env"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 20 #"interrupt-with-value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 7 #"the-env"
0 0 24 3 3 #") ("
0 0 14 3 26 #"apply-env-ignore-interrupt"
0 0 24 3 1 #" "
0 0 14 3 7 #"the-env"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"interrupt-break"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-env"
0 0 24 3 3 #") ("
0 0 14 3 26 #"apply-env-ignore-interrupt"
0 0 24 3 1 #" "
0 0 14 3 7 #"the-env"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"interrupt-continue"
0 0 24 3 2 #" ("
0 0 14 3 7 #"the-env"
0 0 24 3 3 #") ("
0 0 14 3 26 #"apply-env-ignore-interrupt"
0 0 24 3 1 #" "
0 0 14 3 7 #"the-env"
0 0 24 3 1 #" "
0 0 14 3 10 #"search-var"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"interrupt->value"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 20 #"interrupt-with-value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 7 #"the-env"
0 0 24 3 2 #") "
0 0 14 3 3 #"val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"concat-envs"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"prior-env"
0 0 24 3 1 #" "
0 0 14 3 13 #"posterior-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"environment"
0 0 24 3 1 #" "
0 0 14 3 9 #"prior-env"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"empty-env"
0 0 24 3 4 #" () "
0 0 14 3 13 #"posterior-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 8 #"rest-env"
0 0 24 3 3 #") ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 11 #"concat-envs"
0 0 24 3 1 #" "
0 0 14 3 8 #"rest-env"
0 0 24 3 1 #" "
0 0 14 3 13 #"posterior-env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"interrupt-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 13 #"interrupt-env"
0 0 24 3 2 #" ("
0 0 14 3 11 #"concat-envs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 13 #"posterior-env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 20 #"interrupt-with-value"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 20 #"interrupt-with-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 11 #"concat-envs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 13 #"posterior-env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"interrupt-break"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 15 #"interrupt-break"
0 0 24 3 2 #" ("
0 0 14 3 11 #"concat-envs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 13 #"posterior-env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 18 #"interrupt-continue"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 18 #"interrupt-continue"
0 0 24 3 2 #" ("
0 0 14 3 11 #"concat-envs"
0 0 24 3 2 #" ("
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 13 #"posterior-env"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"   "
0 0 24 29 1 #"\n"
0 0 17 3 11 #"; datatypes"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 8 #"program?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"prog"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 11 #"statements?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 11 #"statements?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"single-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 10 #"statement?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"multi-stmts"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 5 #"stmts"
0 0 24 3 1 #" "
0 0 14 3 11 #"statements?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 10 #"statement?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 10 #"statement?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"simple-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 17 #"simple-statement?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 13 #"compound-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 19 #"compound-statement?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 16 #"simple-statement"
0 0 24 3 1 #" "
0 0 14 3 17 #"simple-statement?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"assign-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 10 #"assign-var"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 10 #"assign-val"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"return-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 17 #"return-statement?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"global-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 8 #"variable"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"pass-stmt"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"break-stmt"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 13 #"continue-stmt"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 16 #"return-statement"
0 0 24 3 1 #" "
0 0 14 3 17 #"return-statement?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 22 #"return-with-value-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 12 #"return-value"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 25 #"return-without-value-stmt"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 18 #"compound-statement"
0 0 24 3 1 #" "
0 0 14 3 19 #"compound-statement?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 28 #"function-def-with-param-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 7 #"params?"
0 0 24 3 2 #"] "
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 11 #"statements?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 31 #"function-def-without-param-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 11 #"statements?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"if-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"on-true"
0 0 24 3 1 #" "
0 0 14 3 11 #"statements?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 8 #"on-false"
0 0 24 3 1 #" "
0 0 14 3 11 #"statements?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"for-stmt"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 8 #"iterator"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"iterating"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 11 #"statements?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 18 #"param-with-default"
0 0 24 3 1 #" "
0 0 14 3 19 #"param-with-default?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"param"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 22 #"param-with-default->id"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"prm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 18 #"param-with-default"
0 0 24 3 1 #" "
0 0 14 3 3 #"prm"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"param"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 2 #"id"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"param-with-default->exp"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"prm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 18 #"param-with-default"
0 0 24 3 1 #" "
0 0 14 3 3 #"prm"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"param"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 2 #") "
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 5 #"error"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 7 #"params?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 12 #"single-param"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 18 #"param-with-defualt"
0 0 24 3 1 #" "
0 0 14 3 19 #"param-with-default?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 12 #"multi-params"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 11 #"rest-params"
0 0 24 3 1 #" "
0 0 14 3 7 #"params?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 10 #"last-param"
0 0 24 3 1 #" "
0 0 14 3 19 #"param-with-default?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"params->ids"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"prms"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"single-param"
0 0 24 3 2 #" ("
0 0 14 3 3 #"prm"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 22 #"param-with-default->id"
0 0 24 3 1 #" "
0 0 14 3 3 #"prm"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"multi-params"
0 0 24 3 2 #" ("
0 0 14 3 8 #"the-prms"
0 0 24 3 1 #" "
0 0 14 3 3 #"prm"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 11 #"params->ids"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-prms"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 22 #"param-with-default->id"
0 0 24 3 1 #" "
0 0 14 3 3 #"prm"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 12 #"params->exps"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"prms"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 4 #"prms"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"single-param"
0 0 24 3 2 #" ("
0 0 14 3 3 #"prm"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 23 #"param-with-default->exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"prm"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 12 #"multi-params"
0 0 24 3 2 #" ("
0 0 14 3 8 #"the-prms"
0 0 24 3 1 #" "
0 0 14 3 3 #"prm"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 12 #"params->exps"
0 0 24 3 1 #" "
0 0 14 3 8 #"the-prms"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 23 #"param-with-default->exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"prm"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"params->default-vals"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 4 #"exps"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 15 #"disjunction-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 13 #"disjuntion-op"
0 0 24 3 1 #" "
0 0 14 3 23 #"disjunction-expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 22 #"disjunction-expression"
0 0 24 3 1 #" "
0 0 14 3 23 #"disjunction-expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 22 #"simple-disjunction-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 13 #"conjuntion-op"
0 0 24 3 1 #" "
0 0 14 3 23 #"conjunction-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 23 #"complex-disjunction-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 14 #"disjunction-op"
0 0 24 3 1 #" "
0 0 14 3 23 #"disjunction-expression?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 13 #"conjuntion-op"
0 0 24 3 1 #" "
0 0 14 3 23 #"conjunction-expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 22 #"conjunction-expression"
0 0 24 3 1 #" "
0 0 14 3 23 #"conjunction-expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 22 #"simple-conjunction-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 12 #"inversion-op"
0 0 24 3 1 #" "
0 0 14 3 21 #"inversion-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 23 #"complex-conjunction-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 13 #"conjuntion-op"
0 0 24 3 1 #" "
0 0 14 3 23 #"conjunction-expression?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 12 #"inversion-op"
0 0 24 3 1 #" "
0 0 14 3 21 #"inversion-expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 20 #"inversion-expression"
0 0 24 3 1 #" "
0 0 14 3 21 #"inversion-expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 17 #"not-inversion-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 12 #"inversion-op"
0 0 24 3 1 #" "
0 0 14 3 21 #"inversion-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 24 #"comprasion-inversion-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 13 #"comparison-op"
0 0 24 3 1 #" "
0 0 14 3 22 #"comprasion-expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 21 #"comprasion-expression"
0 0 24 3 1 #" "
0 0 14 3 22 #"comprasion-expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 24 #"comparing-comparison-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 15 #"sum-expression?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 8 #"pairs-op"
0 0 24 3 1 #" "
0 0 14 3 27 #"compare-operator-sum-pairs?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 17 #"no-comparison-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 15 #"sum-expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 26 #"compare-operator-sum-pairs"
0 0 24 3 1 #" "
0 0 14 3 27 #"compare-operator-sum-pairs?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 24 #"single-operator-sum-pair"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 14 3 26 #"compare-operator-sum-pair?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 24 #"multi-operator-sum-pairs"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 10 #"rest-pairs"
0 0 24 3 1 #" "
0 0 14 3 27 #"compare-operator-sum-pairs?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"last-pair"
0 0 24 3 1 #" "
0 0 14 3 26 #"compare-operator-sum-pair?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 25 #"compare-operator-sum-pair"
0 0 24 3 1 #" "
0 0 14 3 26 #"compare-operator-sum-pair?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"eq-sum"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 15 #"sum-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"lt-sum"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 15 #"sum-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 6 #"gt-sum"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 15 #"sum-expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 14 #"sum-expression"
0 0 24 3 1 #" "
0 0 14 3 15 #"sum-expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"sum+"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 15 #"sum-expression?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 16 #"term-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 4 #"sum-"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 15 #"sum-expression?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 16 #"term-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"sum-nop"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 16 #"term-expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 15 #"term-expression"
0 0 24 3 1 #" "
0 0 14 3 16 #"term-expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"term*"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 16 #"term-expression?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 18 #"factor-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 5 #"term/"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 16 #"term-expression?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 18 #"factor-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 8 #"term-nop"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 18 #"factor-expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 17 #"factor-expression"
0 0 24 3 1 #" "
0 0 14 3 18 #"factor-expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"factor+"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 18 #"factor-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"factor-"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 18 #"factor-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"factor-nop"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 8 #"power-op"
0 0 24 3 1 #" "
0 0 14 3 17 #"power-expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 16 #"power-expression"
0 0 24 3 1 #" "
0 0 14 3 17 #"power-expression?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 7 #"power**"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"atom-op"
0 0 24 3 1 #" "
0 0 14 3 5 #"atom?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 18 #"factor-expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"power-nop"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 10 #"primary-op"
0 0 24 3 1 #" "
0 0 14 3 8 #"primary?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 7 #"primary"
0 0 24 3 1 #" "
0 0 14 3 8 #"primary?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 14 #"atomic-primary"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"atom-op"
0 0 24 3 1 #" "
0 0 14 3 5 #"atom?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"list-call"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 7 #"list-op"
0 0 24 3 1 #" "
0 0 14 3 8 #"primary?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 8 #"index-op"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 22 #"function-with-arg-call"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 11 #"function-op"
0 0 24 3 1 #" "
0 0 14 3 8 #"primary?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 12 #"arguments-op"
0 0 24 3 1 #" "
0 0 14 3 10 #"arguments?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 25 #"function-without-arg-call"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 11 #"function-op"
0 0 24 3 1 #" "
0 0 14 3 8 #"primary?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"print-call"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 9 #"arguments"
0 0 24 3 1 #" "
0 0 14 3 10 #"arguments?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"single-arg"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"multi-args"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"rest-args"
0 0 24 3 1 #" "
0 0 14 3 10 #"arguments?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 8 #"last-arg"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 4 #"atom"
0 0 24 3 1 #" "
0 0 14 3 5 #"atom?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 9 #"atomic-id"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 7 #"symbol?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"atomic-true"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 12 #"atomic-false"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"atomic-none"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 13 #"atomic-number"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 7 #"number?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 11 #"atomic-list"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"list-type"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-type?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 9 #"list-type"
0 0 24 3 1 #" "
0 0 14 3 10 #"list-type?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 12 #"dataful-list"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 12 #"expressions?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 13 #"dataless-list"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 15 #"define-datatype"
0 0 24 3 1 #" "
0 0 14 3 11 #"expressions"
0 0 24 3 1 #" "
0 0 14 3 12 #"expressions?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"single-exp"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 2 #"]]"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ["
0 0 14 3 10 #"multi-exps"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 9 #"rest-exps"
0 0 24 3 1 #" "
0 0 14 3 12 #"expressions?"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ["
0 0 14 3 8 #"last-exp"
0 0 24 3 1 #" "
0 0 14 3 11 #"expression?"
0 0 24 3 3 #"]])"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 9 #"; execute"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 15 #"execute-program"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"pgm"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"initialize-store!"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"program"
0 0 24 3 1 #" "
0 0 14 3 3 #"pgm"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"prog"
0 0 24 3 2 #" ("
0 0 14 3 5 #"stmts"
0 0 24 3 3 #") ("
0 0 14 3 18 #"execute-statements"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 2 #" ("
0 0 14 3 9 #"empty-env"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"execute-statements"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"stmts"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"statements"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"single-stmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 17 #"execute-statement"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"multi-stmts"
0 0 24 3 2 #" ("
0 0 14 3 5 #"stmts"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 17 #"execute-statement"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 2 #" ("
0 0 14 3 18 #"execute-statements"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"execute-statement"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"interrupted?"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"statement"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 11 #"simple-stmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 24 #"execute-simple-statement"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"compound-stmt"
0 0 24 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 24 3 3 #") ("
0 0 14 3 26 #"execute-compound-statement"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"execute-simple-statement"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 16 #"simple-statement"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"assign-stmt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"bounded?"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 15 3 5 #"begin"
0 0 24 3 2 #" ("
0 0 14 3 7 #"setref!"
0 0 24 3 2 #" ("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                        "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 24 3 2 #" ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"return-stmt"
0 0 24 3 2 #" ("
0 0 14 3 11 #"return-stmt"
0 0 24 3 3 #") ("
0 0 14 3 24 #"execute-return-statement"
0 0 24 3 1 #" "
0 0 14 3 11 #"return-stmt"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"global-stmt"
0 0 24 3 2 #" ("
0 0 14 3 3 #"var"
0 0 24 3 3 #") ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #" ("
0 0 14 3 26 #"apply-env-ignore-interrupt"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 3 #"var"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"pass-stmt"
0 0 24 3 4 #" () "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"break-stmt"
0 0 24 3 5 #" () ("
0 0 14 3 15 #"interrupt-break"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"continue-stmt"
0 0 24 3 5 #" () ("
0 0 14 3 18 #"interrupt-continue"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"execute-compound-statement"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 18 #"compound-statement"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 28 #"function-def-with-param-stmt"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 24 3 2 #" ("
0 0 14 3 12 #"function-val"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 11 #"params->ids"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 3 #") ("
0 0 14 3 20 #"params->default-vals"
0 0 24 3 2 #" ("
0 0 14 3 12 #"params->exps"
0 0 24 3 1 #" "
0 0 14 3 6 #"params"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 5 #"stmts"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 31 #"function-def-without-param-stmt"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"stmts"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 24 3 2 #" ("
0 0 14 3 12 #"function-val"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"stmts"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"if-stmt"
0 0 24 3 2 #" ("
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 7 #"on-true"
0 0 24 3 1 #" "
0 0 14 3 8 #"on-false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 18 #"execute-statements"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 17 #"store-value->bool"
0 0 24 3 2 #" ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"condition"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")) "
0 0 14 3 7 #"on-true"
0 0 24 3 2 #"  "
0 0 14 3 8 #"on-false"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"for-stmt"
0 0 24 3 2 #" ("
0 0 14 3 8 #"iterator"
0 0 24 3 1 #" "
0 0 14 3 9 #"iterating"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 22 #"remove-break-interrupt"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 5 #"foldl"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 12 #"iterator-val"
0 0 24 3 1 #" "
0 0 14 3 11 #"current-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 25 #"remove-continue-interrupt"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 18 #"execute-statements"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                      "
0 0 14 3 4 #"body"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 18 #"interrupted-break?"
0 0 24 3 1 #" "
0 0 14 3 11 #"current-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                          "
0 0 14 3 11 #"current-env"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 10 #"extend-env"
0 0 24 3 1 #" "
0 0 14 3 8 #"iterator"
0 0 24 3 2 #" ("
0 0 14 3 6 #"newref"
0 0 24 3 1 #" "
0 0 14 3 12 #"iterator-val"
0 0 24 3 2 #") "
0 0 14 3 11 #"current-env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 14 3 3 #"env"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 17 #"store-value->list"
0 0 24 3 2 #" ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"iterating"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"execute-return-statement"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"stmt"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 16 #"return-statement"
0 0 24 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 22 #"return-with-value-stmt"
0 0 24 3 2 #" ("
0 0 14 3 7 #"val-exp"
0 0 24 3 3 #") ("
0 0 14 3 20 #"interrupt-with-value"
0 0 24 3 2 #" ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"val-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 25 #"return-without-value-stmt"
0 0 24 3 5 #" () ("
0 0 14 3 20 #"interrupt-with-value"
0 0 24 3 2 #" ("
0 0 14 3 8 #"none-val"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"value-of-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 10 #"expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 15 #"disjunction-exp"
0 0 24 3 2 #" ("
0 0 14 3 14 #"disjunction-op"
0 0 24 3 3 #") ("
0 0 14 3 31 #"value-of-disjunction-expression"
0 0 24 3 1 #" "
0 0 14 3 14 #"disjunction-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 31 #"value-of-disjunction-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 15 #"disjunction-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 22 #"disjunction-expression"
0 0 24 3 1 #" "
0 0 14 3 15 #"disjunction-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 22 #"simple-disjunction-exp"
0 0 24 3 2 #" ("
0 0 14 3 14 #"conjunction-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 31 #"value-of-conjunction-expression"
0 0 24 3 1 #" "
0 0 14 3 14 #"conjunction-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 23 #"complex-disjunction-exp"
0 0 24 3 2 #" ("
0 0 14 3 14 #"disjunction-op"
0 0 24 3 1 #" "
0 0 14 3 14 #"conjunction-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 17 #"store-value->bool"
0 0 24 3 2 #" ("
0 0 14 3 31 #"value-of-disjunction-expression"
0 0 24 3 1 #" "
0 0 14 3 14 #"disjunction-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 17 #"store-value->bool"
0 0 24 3 2 #" ("
0 0 14 3 31 #"value-of-conjunction-expression"
0 0 24 3 1 #" "
0 0 14 3 14 #"conjunction-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 31 #"value-of-conjunction-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 15 #"conjunction-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 22 #"conjunction-expression"
0 0 24 3 1 #" "
0 0 14 3 15 #"conjunction-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 22 #"simple-conjunction-exp"
0 0 24 3 2 #" ("
0 0 14 3 12 #"inversion-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 31 #"                              ("
0 0 14 3 29 #"value-of-inversion-expression"
0 0 24 3 1 #" "
0 0 14 3 12 #"inversion-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 23 #"complex-conjunction-exp"
0 0 24 3 2 #" ("
0 0 14 3 14 #"conjunction-op"
0 0 24 3 1 #" "
0 0 14 3 12 #"inversion-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 17 #"store-value->bool"
0 0 24 3 2 #" ("
0 0 14 3 31 #"value-of-conjunction-expression"
0 0 24 3 1 #" "
0 0 14 3 14 #"conjunction-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 43 #"                                          ("
0 0 14 3 17 #"store-value->bool"
0 0 24 3 2 #" ("
0 0 14 3 29 #"value-of-inversion-expression"
0 0 24 3 1 #" "
0 0 14 3 12 #"inversion-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 29 #"value-of-inversion-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 13 #"inversion-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 20 #"inversion-expression"
0 0 24 3 1 #" "
0 0 14 3 13 #"inversion-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"not-inversion-exp"
0 0 24 3 2 #" ("
0 0 14 3 12 #"inversion-op"
0 0 24 3 3 #") ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"not"
0 0 24 3 2 #" ("
0 0 14 3 17 #"store-value->bool"
0 0 24 3 2 #" ("
0 0 14 3 29 #"value-of-inversion-expression"
0 0 24 3 1 #" "
0 0 14 3 12 #"inversion-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 24 #"comprasion-inversion-exp"
0 0 24 3 2 #" ("
0 0 14 3 13 #"comparison-op"
0 0 24 3 3 #") ("
0 0 14 3 30 #"value-of-comprasion-expression"
0 0 24 3 1 #" "
0 0 14 3 13 #"comparison-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 30 #"value-of-comprasion-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 14 #"comprasion-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 21 #"comprasion-expression"
0 0 24 3 1 #" "
0 0 14 3 14 #"comprasion-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 24 #"comparing-comparison-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 8 #"pairs-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 33 #"                                ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 26 #"compare-operator-sum-pairs"
0 0 24 3 1 #" "
0 0 14 3 8 #"pairs-op"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 24 #"single-operator-sum-pair"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 3 #") ("
0 0 14 3 34 #"value-of-compare-operator-sum-pair"
0 0 24 3 2 #" ("
0 0 14 3 23 #"value-of-sum-expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 24 #"multi-operator-sum-pairs"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rest-pairs"
0 0 24 3 1 #" "
0 0 14 3 9 #"last-pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 61
#"                                                            ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 17 #"store-value->bool"
0 0 24 3 2 #" ("
0 0 14 3 30 #"value-of-comprasion-expression"
0 0 24 3 2 #" ("
0 0 14 3 24 #"comparing-comparison-exp"
0 0 24 3 1 #" "
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 10 #"rest-pairs"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 34 #"value-of-compare-operator-sum-pair"
0 0 24 3 2 #" ("
0 0 14 3 17 #"last-sum-of-pairs"
0 0 24 3 1 #" "
0 0 14 3 10 #"rest-pairs"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #") "
0 0 14 3 9 #"last-pair"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 65
#"                                                                ("
0 0 14 3 8 #"bool-val"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 17 #"no-comparison-exp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sum-op"
0 0 24 3 3 #") ("
0 0 14 3 23 #"value-of-sum-expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 34 #"value-of-compare-operator-sum-pair"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 12 #"external-sum"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 25 #"compare-operator-sum-pair"
0 0 24 3 1 #" "
0 0 14 3 4 #"pair"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"eq-sum"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sum-op"
0 0 24 3 3 #") ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 1 #"="
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 1 #" "
0 0 14 3 12 #"external-sum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 23 #"value-of-sum-expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"lt-sum"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sum-op"
0 0 24 3 3 #") ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 1 #"<"
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 1 #" "
0 0 14 3 12 #"external-sum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 23 #"value-of-sum-expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 6 #"gt-sum"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sum-op"
0 0 24 3 3 #") ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 1 #" "
0 0 14 3 12 #"external-sum"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 23 #"value-of-sum-expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 8 #"))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 17 #"last-sum-of-pairs"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pairs"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 23 #"value-of-sum-expression"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 25 #"compare-operator-sum-pair"
0 0 24 3 2 #" ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 26 #"compare-operator-sum-pairs"
0 0 24 3 1 #" "
0 0 14 3 5 #"pairs"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 24 #"single-operator-sum-pair"
0 0 24 3 2 #" ("
0 0 14 3 4 #"pair"
0 0 24 3 2 #") "
0 0 14 3 4 #"pair"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ("
0 0 14 3 24 #"multi-operator-sum-pairs"
0 0 24 3 2 #" ("
0 0 14 3 10 #"rest-pairs"
0 0 24 3 1 #" "
0 0 14 3 9 #"last-pair"
0 0 24 3 2 #") "
0 0 14 3 9 #"last-pair"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 6 #"eq-sum"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sum-op"
0 0 24 3 2 #") "
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 6 #"lt-sum"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sum-op"
0 0 24 3 2 #") "
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 14 3 6 #"gt-sum"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sum-op"
0 0 24 3 2 #") "
0 0 14 3 6 #"sum-op"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                             "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 23 #"value-of-sum-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"sum-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 14 #"sum-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"sum-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"sum+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 7 #"term-op"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"op1"
0 0 24 3 2 #" ("
0 0 14 3 23 #"value-of-sum-expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ["
0 0 14 3 3 #"op2"
0 0 24 3 2 #" ("
0 0 14 3 24 #"value-of-term-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 32 #"                               ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"store-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"op1"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 1 #" "
0 0 14 3 3 #"op1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 69
(5
 #"                                                                    ("
) 0 0 14 3 19 #"store-value->number"
0 0 24 3 1 #" "
0 0 14 3 3 #"op2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 17 #"store-value->bool"
0 0 24 3 1 #" "
0 0 14 3 3 #"op1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 64
#"                                                               ("
0 0 14 3 17 #"store-value->bool"
0 0 24 3 1 #" "
0 0 14 3 3 #"op2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 8 #"list-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-val"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 17 #"store-value->list"
0 0 24 3 1 #" "
0 0 14 3 3 #"op1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                   ("
0 0 14 3 17 #"store-value->list"
0 0 24 3 1 #" "
0 0 14 3 3 #"op2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 34 #"                                 ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 8 #"errorsum"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"sum-"
0 0 24 3 2 #" ("
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 7 #"term-op"
0 0 24 3 3 #") ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 23 #"value-of-sum-expression"
0 0 24 3 1 #" "
0 0 14 3 6 #"sum-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 46 #"                                             ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 24 #"value-of-term-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"sum-nop"
0 0 24 3 2 #" ("
0 0 14 3 7 #"term-op"
0 0 24 3 3 #") ("
0 0 14 3 24 #"value-of-term-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 24 #"value-of-term-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"term-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 15 #"term-expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"term-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"term*"
0 0 24 3 2 #" ("
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 9 #"factor-op"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"op1"
0 0 24 3 2 #" ("
0 0 14 3 24 #"value-of-term-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 40 #"                                       ["
0 0 14 3 3 #"op2"
0 0 24 3 2 #" ("
0 0 14 3 26 #"value-of-factor-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"store-value"
0 0 24 3 1 #" "
0 0 14 3 3 #"op1"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 1 #" "
0 0 14 3 3 #"op1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 73
(6
 #"                                                                     "
 #"   ("
) 0 0 14 3 19 #"store-value->number"
0 0 24 3 1 #" "
0 0 14 3 3 #"op2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"val"
0 0 24 3 3 #") ("
0 0 14 3 8 #"bool-val"
0 0 24 3 2 #" ("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 17 #"store-value->bool"
0 0 24 3 1 #" "
0 0 14 3 3 #"op1"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 69 5 0 0 14 3 17 #"store-value->bool"
0 0 24 3 1 #" "
0 0 14 3 3 #"op2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                     ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"errorterm"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"term/"
0 0 24 3 2 #" ("
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 9 #"factor-op"
0 0 24 3 3 #") ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 1 #"/"
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 24 #"value-of-term-expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"term-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 53 #"                                                    ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 26 #"value-of-factor-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))) "
0 0 21 3 3 #"1.0"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 8 #"term-nop"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factor-op"
0 0 24 3 3 #") ("
0 0 14 3 26 #"value-of-factor-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 26 #"value-of-factor-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 10 #"factor-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 17 #"factor-expression"
0 0 24 3 1 #" "
0 0 14 3 10 #"factor-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"factor+"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factor-op"
0 0 24 3 3 #") ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"+1"
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 26 #"value-of-factor-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"factor-"
0 0 24 3 2 #" ("
0 0 14 3 9 #"factor-op"
0 0 24 3 3 #") ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 21 3 2 #"-1"
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 26 #"value-of-factor-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"factor-nop"
0 0 24 3 2 #" ("
0 0 14 3 8 #"power-op"
0 0 24 3 3 #") ("
0 0 14 3 25 #"value-of-power-expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"power-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 25 #"value-of-power-expression"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"power-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 16 #"power-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"power-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 7 #"power**"
0 0 24 3 2 #" ("
0 0 14 3 7 #"atom-op"
0 0 24 3 1 #" "
0 0 14 3 9 #"factor-op"
0 0 24 3 3 #") ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 2 #" ("
0 0 14 3 4 #"expt"
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 13 #"value-of-atom"
0 0 24 3 1 #" "
0 0 14 3 7 #"atom-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 55 #"                                                      ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 26 #"value-of-factor-expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"factor-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"power-nop"
0 0 24 3 2 #" ("
0 0 14 3 10 #"primary-op"
0 0 24 3 3 #") ("
0 0 14 3 16 #"value-of-primary"
0 0 24 3 1 #" "
0 0 14 3 10 #"primary-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"value-of-primary"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"prmy-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 7 #"primary"
0 0 24 3 1 #" "
0 0 14 3 8 #"prmy-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 14 #"atomic-primary"
0 0 24 3 2 #" ("
0 0 14 3 7 #"atom-op"
0 0 24 3 3 #") ("
0 0 14 3 13 #"value-of-atom"
0 0 24 3 1 #" "
0 0 14 3 7 #"atom-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"list-call"
0 0 24 3 2 #" ("
0 0 14 3 7 #"list-op"
0 0 24 3 1 #" "
0 0 14 3 8 #"index-op"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 17 #"store-value->list"
0 0 24 3 2 #" ("
0 0 14 3 16 #"value-of-primary"
0 0 24 3 1 #" "
0 0 14 3 7 #"list-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                              ("
0 0 14 3 19 #"store-value->number"
0 0 24 3 2 #" ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"index-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 22 #"function-with-arg-call"
0 0 24 3 2 #" ("
0 0 14 3 11 #"function-op"
0 0 24 3 1 #" "
0 0 14 3 12 #"arguments-op"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"func-val"
0 0 24 3 2 #" ("
0 0 14 3 16 #"value-of-primary"
0 0 24 3 1 #" "
0 0 14 3 11 #"function-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 60
#"                                                           ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"store-value"
0 0 24 3 1 #" "
0 0 14 3 8 #"func-val"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ("
0 0 14 3 12 #"function-val"
0 0 24 3 2 #" ("
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-vars"
0 0 24 3 1 #" "
0 0 15 3 12 #"default-vals"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 76
(7
 #"                                                                     "
 #"      ("
) 0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"new-env"
0 0 24 3 2 #" ("
0 0 14 3 18 #"execute-statements"
0 0 24 29 1 #"\n"
0 0 24 3 91
(8
 #"                                                                     "
 #"                      "
) 0 0 14 3 4 #"body"
0 0 24 29 1 #"\n"
0 0 24 3 92
(9
 #"                                                                     "
 #"                      ("
) 0 0 14 3 19 #"extend-env-for-call"
0 0 24 29 1 #"\n"
0 0 24 3 92
(10
 #"                                                                     "
 #"                       "
) 0 0 14 3 8 #"func-val"
0 0 24 29 1 #"\n"
0 0 24 3 92 10 0 0 14 3 10 #"bound-vars"
0 0 24 29 1 #"\n"
0 0 24 3 93
(11
 #"                                                                     "
 #"                       ("
) 0 0 14 3 18 #"value-of-arguments"
0 0 24 3 1 #" "
0 0 14 3 12 #"arguments-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 92 10 0 0 15 3 12 #"default-vals"
0 0 24 29 1 #"\n"
0 0 24 3 92 10 0 0 14 3 9 #"saved-env"
0 0 24 29 1 #"\n"
0 0 24 3 92 10 0 0 14 3 3 #"env"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 78
(12
 #"                                                                     "
 #"        ("
) 0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"interrupted?"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 82
(13
 #"                                                                     "
 #"            ("
) 0 0 14 3 16 #"interrupt->value"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 82 13 0 0 14 3 8 #"none-val"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 62
#"                                                             ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"errorprim"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 25 #"function-without-arg-call"
0 0 24 3 2 #" ("
0 0 14 3 11 #"function-op"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 8 #"func-val"
0 0 24 3 2 #" ("
0 0 14 3 16 #"value-of-primary"
0 0 24 3 1 #" "
0 0 14 3 11 #"function-op"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 50 #"                                                 ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"store-value"
0 0 24 3 1 #" "
0 0 14 3 8 #"func-val"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 12 #"function-val"
0 0 24 3 2 #" ("
0 0 14 3 13 #"function-name"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-vars"
0 0 24 3 1 #" "
0 0 15 3 12 #"default-vals"
0 0 24 3 1 #" "
0 0 14 3 4 #"body"
0 0 24 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 66
#"                                                                 ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"new-env"
0 0 24 3 2 #" ("
0 0 14 3 18 #"execute-statements"
0 0 24 29 1 #"\n"
0 0 24 3 81
(14
 #"                                                                     "
 #"            "
) 0 0 14 3 4 #"body"
0 0 24 29 1 #"\n"
0 0 24 3 82 13 0 0 14 3 19 #"extend-env-for-call"
0 0 24 29 1 #"\n"
0 0 24 3 82
(15
 #"                                                                     "
 #"             "
) 0 0 14 3 8 #"func-val"
0 0 24 29 1 #"\n"
0 0 24 3 82 15 0 0 14 3 10 #"bound-vars"
0 0 24 29 1 #"\n"
0 0 24 3 82 15 0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 82 15 0 0 15 3 12 #"default-vals"
0 0 24 29 1 #"\n"
0 0 24 3 82 15 0 0 14 3 9 #"saved-env"
0 0 24 29 1 #"\n"
0 0 24 3 82 15 0 0 14 3 3 #"env"
0 0 24 3 4 #"))])"
0 0 24 29 1 #"\n"
0 0 24 3 68
#"                                                                   ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 12 #"interrupted?"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 72
(16
 #"                                                                     "
 #"  ("
) 0 0 14 3 16 #"interrupt->value"
0 0 24 3 1 #" "
0 0 14 3 7 #"new-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 72 16 0 0 14 3 8 #"none-val"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 52 #"                                                   ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 9 #"errorprim"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"print-call"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 3 #") ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 3 #"val"
0 0 24 3 2 #" ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 7 #"display"
0 0 24 3 2 #" ("
0 0 14 3 13 #"string-append"
0 0 24 3 2 #" ("
0 0 14 3 19 #"store-value->string"
0 0 24 3 1 #" "
0 0 14 3 3 #"val"
0 0 24 3 2 #") "
0 0 19 3 4 #"\"\\n\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 14 3 3 #"val"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 19 #"extend-env-for-call"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"func-val"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 10 #"bound-vals"
0 0 24 3 1 #" "
0 0 15 3 12 #"default-vals"
0 0 24 3 1 #" "
0 0 14 3 9 #"saved-env"
0 0 24 3 1 #" "
0 0 14 3 11 #"runtime-env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 20 #"extend-env-with-vals"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 4 #"vars"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 14 3 10 #"bound-vals"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 14 3 20 #"extend-env-with-vals"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 14 3 4 #"vars"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 15 3 12 #"default-vals"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"extend-env"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 40 #"store-value->function-val->function-name"
0 0 24 3 1 #" "
0 0 14 3 8 #"func-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 6 #"newref"
0 0 24 3 1 #" "
0 0 14 3 8 #"func-val"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 11 #"concat-envs"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 9 #"saved-env"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 13 #"interrupt-env"
0 0 24 3 1 #" "
0 0 14 3 11 #"runtime-env"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"extend-env-with-vals"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"vars"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"      [("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 2 #") "
0 0 14 3 3 #"env"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 20 #"extend-env-with-vals"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 3 #") ("
0 0 14 3 10 #"extend-env"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"vars"
0 0 24 3 3 #") ("
0 0 14 3 6 #"newref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"vals"
0 0 24 3 3 #")) "
0 0 14 3 3 #"env"
0 0 24 3 6 #"))])))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"value-of-arguments"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"args"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"arguments"
0 0 24 3 1 #" "
0 0 14 3 4 #"args"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"single-arg"
0 0 24 3 2 #" ("
0 0 14 3 3 #"arg"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"arg"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"multi-args"
0 0 24 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 4 #"last"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 18 #"value-of-arguments"
0 0 24 3 1 #" "
0 0 14 3 4 #"rest"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"value-of-atom"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"atom-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 4 #"atom"
0 0 24 3 1 #" "
0 0 14 3 8 #"atom-exp"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 9 #"atomic-id"
0 0 24 3 2 #" ("
0 0 14 3 2 #"id"
0 0 24 3 3 #") ("
0 0 14 3 5 #"deref"
0 0 24 3 1 #"("
0 0 14 3 9 #"apply-env"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"atomic-true"
0 0 24 3 5 #" () ("
0 0 14 3 8 #"bool-val"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"atomic-false"
0 0 24 3 5 #" () ("
0 0 14 3 8 #"bool-val"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"atomic-none"
0 0 24 3 5 #" () ("
0 0 14 3 8 #"none-val"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"atomic-number"
0 0 24 3 2 #" ("
0 0 14 3 3 #"num"
0 0 24 3 3 #") ("
0 0 14 3 11 #"numeric-val"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 11 #"atomic-list"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-exps"
0 0 24 3 3 #") ("
0 0 14 3 18 #"value-of-list-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"list-exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 18 #"value-of-list-type"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 9 #"list-exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 9 #"list-type"
0 0 24 3 1 #" "
0 0 14 3 9 #"list-exps"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 12 #"dataful-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 24 3 3 #") ("
0 0 14 3 8 #"list-val"
0 0 24 3 2 #" ("
0 0 14 3 20 #"value-of-expressions"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 13 #"dataless-list"
0 0 24 3 5 #" () ("
0 0 14 3 8 #"list-val"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 7 #"())))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"value-of-expressions"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"cases"
0 0 24 3 1 #" "
0 0 14 3 11 #"expressions"
0 0 24 3 1 #" "
0 0 14 3 4 #"exps"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"single-exp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 3 #"exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 10 #"multi-exps"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rest-exps"
0 0 24 3 1 #" "
0 0 14 3 8 #"last-exp"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 20 #"value-of-expressions"
0 0 24 3 1 #" "
0 0 14 3 9 #"rest-exps"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 19 #"value-of-expression"
0 0 24 3 1 #" "
0 0 14 3 8 #"last-exp"
0 0 24 3 1 #" "
0 0 14 3 3 #"env"
0 0 24 3 7 #")))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 7 #"; lexer"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"main-lexer"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 5 #"lexer"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #":or"
0 0 24 3 2 #" ("
0 0 14 3 2 #":+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"char-range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\9"
0 0 24 3 4 #")) ("
0 0 14 3 2 #"::"
0 0 24 3 2 #" ("
0 0 14 3 2 #":+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"char-range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\9"
0 0 24 3 3 #")) "
0 0 21 3 3 #"#\\."
0 0 24 3 2 #" ("
0 0 14 3 2 #":+"
0 0 24 3 2 #" ("
0 0 14 3 10 #"char-range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\9"
0 0 24 3 6 #")))) ("
0 0 14 3 9 #"token-NUM"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->number"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexeme"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 2 #":&"
0 0 24 3 2 #" ("
0 0 14 3 10 #"repetition"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 6 #"+inf.0"
0 0 24 3 2 #" ("
0 0 14 3 5 #"union"
0 0 24 3 2 #" ("
0 0 14 3 10 #"char-range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\a"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\z"
0 0 24 3 3 #") ("
0 0 14 3 10 #"char-range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\A"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\Z"
0 0 24 3 2 #") "
0 0 21 3 3 #"#\\_"
0 0 24 3 2 #" ("
0 0 14 3 10 #"char-range"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\0"
0 0 24 3 1 #" "
0 0 21 3 3 #"#\\9"
0 0 24 3 4 #") ))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 10 #"complement"
0 0 24 3 2 #" ("
0 0 14 3 3 #":or"
0 0 24 3 2 #" ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"if\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"else\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"def\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"break\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"pass\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 10 #"\"continue\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"return\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 8 #"\"global\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                  ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"for\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"in\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 4 #"\"or\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"and\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 5 #"\"not\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"True\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"False\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 6 #"\"None\""
0 0 24 3 3 #") ("
0 0 14 3 2 #":?"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"print\""
0 0 24 3 6 #")))) ("
0 0 14 3 8 #"token-ID"
0 0 24 3 2 #" ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 6 #"lexeme"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\"+\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"token-+"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\"-\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"token--"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\"*\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"token-*"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 4 #"\"**\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"token-**"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 4 #"\"if\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"token-if"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 6 #"\"else\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"token-else"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\";\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"token-sc"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 6 #"\"pass\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"token-pass"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 7 #"\"break\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-break"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 10 #"\"continue\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"token-continue"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\"=\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"token-="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 8 #"\"return\""
0 0 24 3 2 #" ("
0 0 14 3 12 #"token-return"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 8 #"\"global\""
0 0 24 3 2 #" ("
0 0 14 3 12 #"token-global"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 5 #"\"def\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"token-def"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\"(\""
0 0 24 3 2 #" ("
0 0 14 3 14 #"token-open_par"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\")\""
0 0 24 3 2 #" ("
0 0 14 3 15 #"token-close_par"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\":\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"token-dd"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 5 #"\"():\""
0 0 24 3 2 #" ("
0 0 14 3 13 #"token-o_c_p_d"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\",\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"token-cama"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 5 #"\"for\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"token-for"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 4 #"\"in\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"token-in"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 4 #"\"or\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"token-or"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 5 #"\"and\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"token-and"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 5 #"\"not\""
0 0 24 3 2 #" ("
0 0 14 3 9 #"token-not"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 4 #"\"==\""
0 0 24 3 2 #" ("
0 0 14 3 8 #"token-=="
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\"<\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"token-<"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\">\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"token->"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\"/\""
0 0 24 3 2 #" ("
0 0 14 3 7 #"token-/"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\"[\""
0 0 24 3 2 #" ("
0 0 14 3 12 #"token-open_q"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 3 #"\"]\""
0 0 24 3 2 #" ("
0 0 14 3 13 #"token-close_q"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 4 #"\"[]\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-o_c_p"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 6 #"\"True\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"token-True"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 7 #"\"False\""
0 0 24 3 2 #" ("
0 0 14 3 11 #"token-False"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 6 #"\"None\""
0 0 24 3 2 #" ("
0 0 14 3 10 #"token-None"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 19 3 7 #"\"print\""
0 0 24 3 2 #" ("
0 0 14 3 13 #"token-println"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"whitespace"
0 0 24 3 2 #" ("
0 0 14 3 10 #"main-lexer"
0 0 24 3 1 #" "
0 0 14 3 10 #"input-port"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"            (("
0 0 14 3 3 #"eof"
0 0 24 3 3 #") ("
0 0 14 3 9 #"token-EOF"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; tokens"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 13 #"define-tokens"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-tokens"
0 0 24 3 2 #" ("
0 0 14 3 3 #"NUM"
0 0 24 3 1 #" "
0 0 14 3 2 #"ID"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 19 #"define-empty-tokens"
0 0 24 3 1 #" "
0 0 14 3 9 #"op-tokens"
0 0 24 3 2 #" ("
0 0 14 3 3 #"EOF"
0 0 24 3 1 #" "
0 0 14 3 2 #"sc"
0 0 24 3 1 #" "
0 0 14 3 4 #"pass"
0 0 24 3 1 #" "
0 0 14 3 5 #"break"
0 0 24 3 1 #" "
0 0 14 3 8 #"continue"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 6 #"global"
0 0 24 3 1 #" "
0 0 15 3 3 #"def"
0 0 24 3 1 #" "
0 0 14 3 8 #"open_par"
0 0 24 3 1 #" "
0 0 14 3 9 #"close_par"
0 0 24 3 1 #" "
0 0 14 3 2 #"dd"
0 0 24 3 1 #" "
0 0 14 3 7 #"o_c_p_d"
0 0 24 3 1 #" "
0 0 14 3 4 #"cama"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                            "
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 15 3 3 #"for"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 2 #"=="
0 0 24 3 1 #" "
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 2 #"**"
0 0 24 3 1 #" "
0 0 14 3 6 #"open_q"
0 0 24 3 1 #" "
0 0 14 3 7 #"close_q"
0 0 24 3 1 #" "
0 0 14 3 5 #"o_c_p"
0 0 24 3 1 #" "
0 0 14 3 4 #"True"
0 0 24 3 1 #" "
0 0 14 3 5 #"False"
0 0 24 3 1 #" "
0 0 14 3 4 #"None"
0 0 24 3 1 #" "
0 0 14 3 7 #"println"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 8 #"; parser"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"main-parser"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"parser"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"start"
0 0 24 3 1 #" "
0 0 14 3 7 #"Program"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"end"
0 0 24 3 1 #" "
0 0 14 3 3 #"EOF"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"error"
0 0 24 3 1 #" "
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"tokens"
0 0 24 3 1 #" "
0 0 14 3 9 #"op-tokens"
0 0 24 3 1 #" "
0 0 14 3 12 #"value-tokens"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 7 #"grammar"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"Program"
0 0 24 3 3 #" (("
0 0 14 3 10 #"Statements"
0 0 24 3 3 #") ("
0 0 14 3 4 #"prog"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"Statements"
0 0 24 3 3 #" (("
0 0 14 3 9 #"Statement"
0 0 24 3 1 #" "
0 0 14 3 2 #"sc"
0 0 24 3 3 #") ("
0 0 14 3 11 #"single-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        (("
0 0 14 3 10 #"Statements"
0 0 24 3 1 #" "
0 0 14 3 9 #"Statement"
0 0 24 3 1 #" "
0 0 14 3 2 #"sc"
0 0 24 3 3 #") ("
0 0 14 3 11 #"multi-stmts"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"Statement"
0 0 24 3 3 #" (("
0 0 14 3 13 #"Compound_stmt"
0 0 24 3 3 #") ("
0 0 14 3 13 #"compound-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       (("
0 0 14 3 11 #"Simple_stmt"
0 0 24 3 3 #") ("
0 0 14 3 11 #"simple-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"Simple_stmt"
0 0 24 3 3 #" (("
0 0 14 3 2 #"ID"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 10 #"Expression"
0 0 24 3 3 #") ("
0 0 14 3 11 #"assign-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 11 #"Return_stmt"
0 0 24 3 3 #") ("
0 0 14 3 11 #"return-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 6 #"global"
0 0 24 3 1 #" "
0 0 14 3 2 #"ID"
0 0 24 3 3 #") ("
0 0 14 3 11 #"global-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 4 #"pass"
0 0 24 3 3 #") ("
0 0 14 3 9 #"pass-stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 5 #"break"
0 0 24 3 3 #") ("
0 0 14 3 10 #"break-stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 8 #"continue"
0 0 24 3 3 #") ("
0 0 14 3 13 #"continue-stmt"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 13 #"Compound_stmt"
0 0 24 3 3 #" (("
0 0 15 3 3 #"def"
0 0 24 3 1 #" "
0 0 14 3 2 #"ID"
0 0 24 3 1 #" "
0 0 14 3 8 #"open_par"
0 0 24 3 1 #" "
0 0 14 3 6 #"Params"
0 0 24 3 1 #" "
0 0 14 3 9 #"close_par"
0 0 24 3 1 #" "
0 0 14 3 2 #"dd"
0 0 24 3 1 #" "
0 0 14 3 10 #"Statements"
0 0 24 3 3 #") ("
0 0 14 3 28 #"function-def-with-param-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 1 #" "
0 0 14 3 2 #"$4"
0 0 24 3 1 #" "
0 0 14 3 2 #"$7"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 29 #"                           (("
0 0 15 3 3 #"def"
0 0 24 3 1 #" "
0 0 14 3 2 #"ID"
0 0 24 3 1 #" "
0 0 14 3 7 #"o_c_p_d"
0 0 24 3 1 #" "
0 0 14 3 10 #"Statements"
0 0 24 3 3 #") ("
0 0 14 3 31 #"function-def-without-param-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 1 #" "
0 0 14 3 2 #"$4"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 10 #"Expression"
0 0 24 3 1 #" "
0 0 14 3 2 #"dd"
0 0 24 3 1 #" "
0 0 14 3 10 #"Statements"
0 0 24 3 1 #" "
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 14 3 2 #"dd"
0 0 24 3 1 #" "
0 0 14 3 10 #"Statements"
0 0 24 3 3 #") ("
0 0 14 3 7 #"if-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 1 #" "
0 0 14 3 2 #"$4"
0 0 24 3 1 #" "
0 0 14 3 2 #"$7"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                          (("
0 0 15 3 3 #"for"
0 0 24 3 1 #" "
0 0 14 3 2 #"ID"
0 0 24 3 1 #" "
0 0 14 3 2 #"in"
0 0 24 3 1 #" "
0 0 14 3 10 #"Expression"
0 0 24 3 1 #" "
0 0 14 3 2 #"dd"
0 0 24 3 1 #" "
0 0 14 3 10 #"Statements"
0 0 24 3 3 #") ("
0 0 14 3 8 #"for-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 1 #" "
0 0 14 3 2 #"$4"
0 0 24 3 1 #" "
0 0 14 3 2 #"$6"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"Return_stmt"
0 0 24 3 3 #" (("
0 0 14 3 6 #"return"
0 0 24 3 3 #") ("
0 0 14 3 25 #"return-without-value-stmt"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        (("
0 0 14 3 6 #"return"
0 0 24 3 1 #" "
0 0 14 3 10 #"Expression"
0 0 24 3 3 #") ("
0 0 14 3 22 #"return-with-value-stmt"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"Params"
0 0 24 3 3 #" (("
0 0 14 3 18 #"Param_with_default"
0 0 24 3 3 #") ("
0 0 14 3 12 #"single-param"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 6 #"Params"
0 0 24 3 1 #" "
0 0 14 3 4 #"cama"
0 0 24 3 1 #" "
0 0 14 3 18 #"Param_with_default"
0 0 24 3 3 #") ("
0 0 14 3 12 #"multi-params"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 18 #"Param_with_default"
0 0 24 3 3 #" (("
0 0 14 3 2 #"ID"
0 0 24 3 1 #" "
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 14 3 10 #"Expression"
0 0 24 3 3 #") ("
0 0 14 3 5 #"param"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"Expression"
0 0 24 3 3 #" (("
0 0 14 3 11 #"Disjunction"
0 0 24 3 3 #") ("
0 0 14 3 15 #"disjunction-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"Disjunction"
0 0 24 3 3 #" (("
0 0 14 3 11 #"Conjunction"
0 0 24 3 3 #") ("
0 0 14 3 22 #"simple-disjunction-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 11 #"Disjunction"
0 0 24 3 1 #" "
0 0 14 3 2 #"or"
0 0 24 3 1 #" "
0 0 14 3 11 #"Conjunction"
0 0 24 3 3 #") ("
0 0 14 3 23 #"complex-disjunction-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"Conjunction"
0 0 24 3 3 #" (("
0 0 14 3 9 #"Inversion"
0 0 24 3 3 #") ("
0 0 14 3 22 #"simple-conjunction-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 11 #"Conjunction"
0 0 24 3 1 #" "
0 0 14 3 3 #"and"
0 0 24 3 1 #" "
0 0 14 3 9 #"Inversion"
0 0 24 3 3 #") ("
0 0 14 3 23 #"complex-conjunction-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"Inversion"
0 0 24 3 3 #" (("
0 0 14 3 3 #"not"
0 0 24 3 1 #" "
0 0 14 3 9 #"Inversion"
0 0 24 3 3 #") ("
0 0 14 3 17 #"not-inversion-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       (("
0 0 14 3 10 #"Comparison"
0 0 24 3 3 #") ("
0 0 14 3 24 #"comprasion-inversion-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 10 #"Comparison"
0 0 24 3 3 #" (("
0 0 14 3 3 #"Sum"
0 0 24 3 1 #" "
0 0 14 3 20 #"Compare_op_Sum_Pairs"
0 0 24 3 3 #") ("
0 0 14 3 24 #"comparing-comparison-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        (("
0 0 14 3 3 #"Sum"
0 0 24 3 3 #") ("
0 0 14 3 17 #"no-comparison-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 20 #"Compare_op_Sum_Pairs"
0 0 24 3 3 #" (("
0 0 14 3 19 #"Compare_op_Sum_Pair"
0 0 24 3 3 #") ("
0 0 14 3 24 #"single-operator-sum-pair"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                  (("
0 0 14 3 20 #"Compare_op_Sum_Pairs"
0 0 24 3 1 #" "
0 0 14 3 19 #"Compare_op_Sum_Pair"
0 0 24 3 3 #") ("
0 0 14 3 24 #"multi-operator-sum-pairs"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 19 #"Compare_op_Sum_Pair"
0 0 24 3 3 #" (("
0 0 14 3 2 #"=="
0 0 24 3 1 #" "
0 0 14 3 3 #"Sum"
0 0 24 3 3 #") ("
0 0 14 3 6 #"eq-sum"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                 (("
0 0 14 3 1 #"<"
0 0 24 3 1 #" "
0 0 14 3 3 #"Sum"
0 0 24 3 3 #") ("
0 0 14 3 6 #"lt-sum"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 35 #"                                 (("
0 0 14 3 1 #">"
0 0 24 3 1 #" "
0 0 14 3 3 #"Sum"
0 0 24 3 3 #") ("
0 0 14 3 6 #"gt-sum"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 3 #"Sum"
0 0 24 3 3 #" (("
0 0 14 3 3 #"Sum"
0 0 24 3 1 #" "
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"Term"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sum+"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 3 #"Sum"
0 0 24 3 1 #" "
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"Term"
0 0 24 3 3 #") ("
0 0 14 3 4 #"sum-"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                 (("
0 0 14 3 4 #"Term"
0 0 24 3 3 #") ("
0 0 14 3 7 #"sum-nop"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"Term"
0 0 24 3 3 #" (("
0 0 14 3 4 #"Term"
0 0 24 3 1 #" "
0 0 14 3 1 #"*"
0 0 24 3 1 #" "
0 0 14 3 6 #"Factor"
0 0 24 3 3 #") ("
0 0 14 3 5 #"term*"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 4 #"Term"
0 0 24 3 1 #" "
0 0 14 3 1 #"/"
0 0 24 3 1 #" "
0 0 14 3 6 #"Factor"
0 0 24 3 3 #") ("
0 0 14 3 5 #"term/"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 6 #"Factor"
0 0 24 3 3 #") ("
0 0 14 3 8 #"term-nop"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 6 #"Factor"
0 0 24 3 3 #" (("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 6 #"Factor"
0 0 24 3 3 #") ("
0 0 14 3 7 #"factor+"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    (("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 6 #"Factor"
0 0 24 3 3 #") ("
0 0 14 3 7 #"factor-"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                    (("
0 0 14 3 5 #"Power"
0 0 24 3 3 #") ("
0 0 14 3 10 #"factor-nop"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 5 #"Power"
0 0 24 3 3 #" (("
0 0 14 3 4 #"Atom"
0 0 24 3 1 #" "
0 0 14 3 2 #"**"
0 0 24 3 1 #" "
0 0 14 3 6 #"Factor"
0 0 24 3 3 #") ("
0 0 14 3 7 #"power**"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   (("
0 0 14 3 7 #"Primary"
0 0 24 3 3 #") ("
0 0 14 3 9 #"power-nop"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 7 #"Primary"
0 0 24 3 3 #" (("
0 0 14 3 4 #"Atom"
0 0 24 3 3 #") ("
0 0 14 3 14 #"atomic-primary"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     (("
0 0 14 3 7 #"Primary"
0 0 24 3 1 #" "
0 0 14 3 6 #"open_q"
0 0 24 3 1 #" "
0 0 14 3 10 #"Expression"
0 0 24 3 1 #" "
0 0 14 3 7 #"close_q"
0 0 24 3 3 #") ("
0 0 14 3 9 #"list-call"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     (("
0 0 14 3 7 #"Primary"
0 0 24 3 1 #" "
0 0 14 3 8 #"open_par"
0 0 24 3 1 #" "
0 0 14 3 9 #"close_par"
0 0 24 3 3 #") ("
0 0 14 3 25 #"function-without-arg-call"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     (("
0 0 14 3 7 #"Primary"
0 0 24 3 1 #" "
0 0 14 3 8 #"open_par"
0 0 24 3 1 #" "
0 0 14 3 9 #"Arguments"
0 0 24 3 1 #" "
0 0 14 3 9 #"close_par"
0 0 24 3 3 #") ("
0 0 14 3 22 #"function-with-arg-call"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                     (("
0 0 14 3 7 #"println"
0 0 24 3 1 #" "
0 0 14 3 8 #"open_par"
0 0 24 3 1 #" "
0 0 14 3 10 #"Expression"
0 0 24 3 1 #" "
0 0 14 3 9 #"close_par"
0 0 24 3 3 #") ("
0 0 14 3 10 #"print-call"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 9 #"Arguments"
0 0 24 3 3 #" (("
0 0 14 3 10 #"Expression"
0 0 24 3 3 #") ("
0 0 14 3 10 #"single-arg"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                       (("
0 0 14 3 9 #"Arguments"
0 0 24 3 1 #" "
0 0 14 3 4 #"cama"
0 0 24 3 1 #" "
0 0 14 3 10 #"Expression"
0 0 24 3 3 #") ("
0 0 14 3 10 #"multi-args"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"Atom"
0 0 24 3 3 #" (("
0 0 14 3 2 #"ID"
0 0 24 3 3 #") ("
0 0 14 3 9 #"atomic-id"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 4 #"True"
0 0 24 3 3 #") ("
0 0 14 3 11 #"atomic-true"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 5 #"False"
0 0 24 3 3 #") ("
0 0 14 3 12 #"atomic-false"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 4 #"None"
0 0 24 3 3 #") ("
0 0 14 3 11 #"atomic-none"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 3 #"NUM"
0 0 24 3 3 #") ("
0 0 14 3 13 #"atomic-number"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 4 #"List"
0 0 24 3 3 #") ("
0 0 14 3 11 #"atomic-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 4 #"List"
0 0 24 3 3 #" (("
0 0 14 3 6 #"open_q"
0 0 24 3 1 #" "
0 0 14 3 11 #"Expressions"
0 0 24 3 1 #" "
0 0 14 3 7 #"close_q"
0 0 24 3 3 #") ("
0 0 14 3 12 #"dataful-list"
0 0 24 3 1 #" "
0 0 14 3 2 #"$2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                  (("
0 0 14 3 5 #"o_c_p"
0 0 24 3 3 #") ("
0 0 14 3 13 #"dataless-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"            ("
0 0 14 3 11 #"Expressions"
0 0 24 3 3 #" (("
0 0 14 3 11 #"Expressions"
0 0 24 3 1 #" "
0 0 14 3 4 #"cama"
0 0 24 3 1 #" "
0 0 14 3 10 #"Expression"
0 0 24 3 3 #") ("
0 0 14 3 10 #"multi-exps"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 1 #" "
0 0 14 3 2 #"$3"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                         (("
0 0 14 3 10 #"Expression"
0 0 24 3 3 #") ("
0 0 14 3 10 #"single-exp"
0 0 24 3 1 #" "
0 0 14 3 2 #"$1"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 6 #"; test"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"evaluate"
0 0 24 3 1 #" "
0 0 14 3 4 #"path"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"lex-this"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"lexer"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 3 #") ("
0 0 15 3 6 #"lambda"
0 0 24 3 5 #" () ("
0 0 14 3 5 #"lexer"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-lexer"
0 0 24 3 2 #" ("
0 0 14 3 8 #"lex-this"
0 0 24 3 1 #" "
0 0 14 3 10 #"main-lexer"
0 0 24 3 2 #" ("
0 0 14 3 17 #"open-input-string"
0 0 24 3 2 #" ("
0 0 14 3 12 #"file->string"
0 0 24 3 1 #" "
0 0 14 3 4 #"path"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (("
0 0 14 3 10 #"parser-res"
0 0 24 3 2 #" ("
0 0 14 3 11 #"main-parser"
0 0 24 3 1 #" "
0 0 14 3 8 #"my-lexer"
0 0 24 3 5 #"))) ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 47 #"                                               "
0 0 17 3 26 #";(trace execute-statement)"
0 0 24 29 1 #"\n"
0 0 24 3 48 #"                                               ("
0 0 14 3 15 #"execute-program"
0 0 24 3 1 #" "
0 0 14 3 10 #"parser-res"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 8 #"evaluate"
0 0 24 3 1 #" "
0 0 19 3 25 #"\"tests/complicated-syntax"
0 0 19 3 5 #".txt\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0           0
